# -*- coding: utf-8 -*-
"""main_chained.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F8Z5LqDruwT2jHzIUbBT20LV5n58Kk-z
"""

# I love Google Colab

# Shared functions/things
import numpy as np
import cv2
import os

number_of_epoch=200

def create_training_data(parent,x):
	l=[]
	folder_name=parent+str(x)
	for i in os.listdir(folder_name):
		file_name=folder_name+"/"+i
		temp=x.split("-")
		valid_age=-1
		valid1=["0","4","8","15","25","38","48","60"]
		for i in range(len(valid1)):
			if valid1[i]==temp[0]:
				valid_age=i

		# Using 0 to read image in grayscale mode
		# img = cv2.imread(file_name,0)
		img = cv2.imread(file_name)
		# print(img.shape)
		# img=cv2.resize(img,(IMG_SIZE,IMG_SIZE))
		l.append([np.array(img),valid_age])

	return l

# chained network for MALE

# Commented out IPython magic to ensure Python compatibility.
# get the MALE data
!rm -rf chained_male_prediction
!rm chained_male_prediction.h5
!rm -rf male
# %ls
!unzip male.zip

#processing MALE data 
valid_X = []
valid_Y=[]
train_X = []
train_Y = []
test_X=[]
test_Y=[]

temp=[]
folder_name="./male/train_data/"
for i in os.listdir(folder_name):
  # print("processing ... ",i)
  temp.extend(create_training_data(folder_name,i))

temp=np.array(temp)
np.random.shuffle(temp)

for i in temp[:int(len(temp)*(0.9))]:
	train_X.append(i[0])
	train_Y.append(i[1])

for i in temp[int(len(temp)*(0.9)):]:
	valid_X.append(i[0])
	valid_Y.append(i[1])

temp=[]
folder_name="./male/test_data/"
for i in os.listdir(folder_name):
  # print("processing ... ",i)
  temp.extend(create_training_data(folder_name,i))

temp=np.array(temp)
np.random.shuffle(temp)

for i in temp:
	test_X.append(i[0])
	test_Y.append(i[1])

valid_X=np.array(valid_X)
valid_Y=np.array(valid_Y)
train_X=np.array(train_X)
train_Y=np.array(train_Y)
test_X=np.array(test_X)
test_Y=np.array(test_Y)

print("FOR MALE : ")
print("shape of training data ==> ",train_X.shape)
print("shape of validation data ==> ",valid_X.shape)
print("shape of testing data ==> ",test_X.shape)

#training chained network for male
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
# import matplotlib.pyplot as plt
# import os
# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

model_male = models.Sequential()
#CONV1
# model_male.add(layers.Conv2D(32, (7, 7), activation='relu', input_shape=(100, 100, 1)))
model_male.add(layers.Conv2D(96, (7, 7),strides=(4,4), input_shape=(227, 227, 3)))
model_male.add(layers.Activation('relu'))
model_male.add(layers.BatchNormalization())
model_male.add(layers.MaxPooling2D(pool_size=(2, 2)))
model_male.add(layers.Dropout(0.5))
#CONV2
model_male.add(layers.Conv2D(256, (5, 5)))
model_male.add(layers.Activation('relu'))
model_male.add(layers.BatchNormalization())
model_male.add(layers.MaxPooling2D(pool_size=(2, 2)))
model_male.add(layers.Dropout(0.5))
#CONV3
model_male.add(layers.Conv2D(384, (3, 3)))
model_male.add(layers.Activation('relu'))
model_male.add(layers.BatchNormalization())
model_male.add(layers.MaxPooling2D(pool_size=(2, 2)))
model_male.add(layers.Dropout(0.5))
#CONV4
model_male.add(layers.Conv2D(256, (3, 3)))
model_male.add(layers.Activation('relu'))
model_male.add(layers.BatchNormalization())
model_male.add(layers.MaxPooling2D(pool_size=(3, 3)))
model_male.add(layers.Dropout(0.5))
#flat
model_male.add(layers.Flatten())
# FC1
model_male.add(layers.Dense(512))
model_male.add(layers.Activation('relu'))
model_male.add(layers.BatchNormalization())
model_male.add(layers.Dropout(0.5))
#FC2
model_male.add(layers.Dense(8))

# model_male.summary()

model_male.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])


history = model_male.fit(train_X, train_Y, epochs=number_of_epoch,
                    validation_data=(valid_X, valid_Y))

model_male.save('chained_male_prediction')
model_male.save('chained_male_prediction.h5')

#Analysis for MALE
test_loss_male, test_acc_male = model_male.evaluate(test_X,  test_Y, verbose=2)
print("\n\nAccuracy(chained Age Prediction for MALE) on Test images ==> ",test_acc_male*100,"% \n")

result = model_male.predict_classes(test_X)
correctly_classified=0
for i in range(len(result)):
  if(abs(result[i]-test_Y[i])==1 or abs(result[i]-test_Y[i])==0):
    correctly_classified+=1

exact_1_off_Acc_male=((correctly_classified/len(result))*100)
print("\n\nExact 1-off Accuracy(chained Age Prediction for MALE) on Test images ==> ",exact_1_off_Acc_male,"% \n")

# chained network for FEMALE

# Commented out IPython magic to ensure Python compatibility.
# get the FEMALE data
!rm -rf chained_female_prediction
!rm chained_female_prediction.h5
!rm -rf female
# %ls
!unzip female.zip

#processing FEMALE data 
valid_X = []
valid_Y=[]
train_X = []
train_Y = []
test_X=[]
test_Y=[]

temp=[]
folder_name="./female/train_data/"
for i in os.listdir(folder_name):
  # print("processing ... ",i)
  temp.extend(create_training_data(folder_name,i))

temp=np.array(temp)
np.random.shuffle(temp)

for i in temp[:int(len(temp)*(0.9))]:
	train_X.append(i[0])
	train_Y.append(i[1])

for i in temp[int(len(temp)*(0.9)):]:
	valid_X.append(i[0])
	valid_Y.append(i[1])

Z=[]
temp=[]
folder_name="./female/test_data/"
for i in os.listdir(folder_name):
  # print("processing ... ",i)
  temp.extend(create_training_data(folder_name,i))

temp=np.array(temp)
np.random.shuffle(temp)

for i in temp:
	test_X.append(i[0])
	test_Y.append(i[1])

valid_X=np.array(valid_X)
valid_Y=np.array(valid_Y)
train_X=np.array(train_X)
train_Y=np.array(train_Y)
test_X=np.array(test_X)
test_Y=np.array(test_Y)

print("FOR FEMALE : ")
print("shape of training data ==> ",train_X.shape)
print("shape of validation data ==> ",valid_X.shape)
print("shape of testing data ==> ",test_X.shape)

#training chained network for FEMALE
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
# import matplotlib.pyplot as plt
# import os
# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

model_female = models.Sequential()
#CONV1
# model_female.add(layers.Conv2D(32, (7, 7), activation='relu', input_shape=(100, 100, 1)))
model_female.add(layers.Conv2D(96, (7, 7),strides=(4,4), input_shape=(227, 227, 3)))
model_female.add(layers.Activation('relu'))
model_female.add(layers.BatchNormalization())
model_female.add(layers.MaxPooling2D(pool_size=(2, 2)))
model_female.add(layers.Dropout(0.5))
#CONV2
model_female.add(layers.Conv2D(256, (5, 5)))
model_female.add(layers.Activation('relu'))
model_female.add(layers.BatchNormalization())
model_female.add(layers.MaxPooling2D(pool_size=(2, 2)))
model_female.add(layers.Dropout(0.5))
#CONV3
model_female.add(layers.Conv2D(384, (3, 3)))
model_female.add(layers.Activation('relu'))
model_female.add(layers.BatchNormalization())
model_female.add(layers.MaxPooling2D(pool_size=(2, 2)))
model_female.add(layers.Dropout(0.5))
#CONV4
model_female.add(layers.Conv2D(256, (3, 3)))
model_female.add(layers.Activation('relu'))
model_female.add(layers.BatchNormalization())
model_female.add(layers.MaxPooling2D(pool_size=(3, 3)))
model_female.add(layers.Dropout(0.5))
#flat
model_female.add(layers.Flatten())
# FC1
model_female.add(layers.Dense(512))
model_female.add(layers.Activation('relu'))
model_female.add(layers.BatchNormalization())
model_female.add(layers.Dropout(0.5))
#FC2
model_female.add(layers.Dense(8))

# model_female.summary()

model_female.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])


history = model_female.fit(train_X, train_Y, epochs=number_of_epoch,
                    validation_data=(valid_X, valid_Y))

model_female.save('chained_female_prediction')
model_female.save('chained_female_prediction.h5')

#Analysis for FEMALE
test_loss_female, test_acc_female = model_female.evaluate(test_X,  test_Y, verbose=2)
print("\n\nAccuracy(chained Age Prediction for FEMALE) on Test images ==> ",test_acc_female*100,"% \n")

result = model_female.predict_classes(test_X)
correctly_classified=0
for i in range(len(result)):
  if(abs(result[i]-test_Y[i])==1 or abs(result[i]-test_Y[i])==0):
    correctly_classified+=1

exact_1_off_Acc_female=((correctly_classified/len(result))*100)
print("\n\nExact 1-off Accuracy(chained Age Prediction for FEMALE) on Test images ==> ",exact_1_off_Acc_female,"% \n")

# chained network for CHILD

# Commented out IPython magic to ensure Python compatibility.
# get the CHILD data
!rm -rf chained_child_prediction
!rm chained_child_prediction.h5
!rm -rf child
# %ls
!unzip child.zip

#processing CHILD data 
valid_X = []
valid_Y=[]
train_X = []
train_Y = []
test_X=[]
test_Y=[]

temp=[]
folder_name="./child/train_data/"
for i in os.listdir(folder_name):
  # print("processing ... ",i)
  temp.extend(create_training_data(folder_name,i))

temp=np.array(temp)
np.random.shuffle(temp)

for i in temp[:int(len(temp)*(0.9))]:
	train_X.append(i[0])
	train_Y.append(i[1])

for i in temp[int(len(temp)*(0.9)):]:
	valid_X.append(i[0])
	valid_Y.append(i[1])

Z=[]
temp=[]
folder_name="./child/test_data/"
for i in os.listdir(folder_name):
  # print("processing ... ",i)
  temp.extend(create_training_data(folder_name,i))

temp=np.array(temp)
np.random.shuffle(temp)

for i in temp:
	test_X.append(i[0])
	test_Y.append(i[1])

valid_X=np.array(valid_X)
valid_Y=np.array(valid_Y)
train_X=np.array(train_X)
train_Y=np.array(train_Y)
test_X=np.array(test_X)
test_Y=np.array(test_Y)

print("FOR child : ")
print("shape of training data ==> ",train_X.shape)
print("shape of validation data ==> ",valid_X.shape)
print("shape of testing data ==> ",test_X.shape)

#training chained network for CHILD
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
# import matplotlib.pyplot as plt
# import os
# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

model_child = models.Sequential()
#CONV1
# model_child.add(layers.Conv2D(32, (7, 7), activation='relu', input_shape=(100, 100, 1)))
model_child.add(layers.Conv2D(96, (7, 7),strides=(4,4), input_shape=(227, 227, 3)))
model_child.add(layers.Activation('relu'))
model_child.add(layers.BatchNormalization())
model_child.add(layers.MaxPooling2D(pool_size=(2, 2)))
model_child.add(layers.Dropout(0.5))
#CONV2
model_child.add(layers.Conv2D(256, (5, 5)))
model_child.add(layers.Activation('relu'))
model_child.add(layers.BatchNormalization())
model_child.add(layers.MaxPooling2D(pool_size=(2, 2)))
model_child.add(layers.Dropout(0.5))
#CONV3
model_child.add(layers.Conv2D(384, (3, 3)))
model_child.add(layers.Activation('relu'))
model_child.add(layers.BatchNormalization())
model_child.add(layers.MaxPooling2D(pool_size=(2, 2)))
model_child.add(layers.Dropout(0.5))
#CONV4
model_child.add(layers.Conv2D(256, (3, 3)))
model_child.add(layers.Activation('relu'))
model_child.add(layers.BatchNormalization())
model_child.add(layers.MaxPooling2D(pool_size=(3, 3)))
model_child.add(layers.Dropout(0.5))
#flat
model_child.add(layers.Flatten())
# FC1
model_child.add(layers.Dense(512))
model_child.add(layers.Activation('relu'))
model_child.add(layers.BatchNormalization())
model_child.add(layers.Dropout(0.5))
#FC2
model_child.add(layers.Dense(8))

# model_child.summary()

model_child.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])


history = model_child.fit(train_X, train_Y, epochs=number_of_epoch,
                    validation_data=(valid_X, valid_Y))

model_child.save('chained_child_prediction')
model_child.save('chained_child_prediction.h5')

#Analysis for CHILD
test_loss_child, test_acc_child = model_child.evaluate(test_X,  test_Y, verbose=2)
print("\n\nAccuracy(chained Age Prediction for CHILD) on Test images ==> ",test_acc_child*100,"% \n")

result = model_child.predict_classes(test_X)
correctly_classified=0
for i in range(len(result)):
  if(abs(result[i]-test_Y[i])==1 or abs(result[i]-test_Y[i])==0):
    correctly_classified+=1

exact_1_off_Acc_child=((correctly_classified/len(result))*100)
print("\n\nExact 1-off Accuracy(chained Age Prediction for CHILD) on Test images ==> ",exact_1_off_Acc_child,"% \n")

#Final Conclusion of chained network
print("============== FINAL ANALYSIS/CONCLUSION =============================")
print("*********************")
print("FOR MALE:")
print("TEST ACCURACY : ",test_acc_male*100)
print("TEST ACCURACY(Exact 1-off) : ",exact_1_off_Acc_male,"%")
print("*********************")
print("FOR FEMALE:")
print("TEST ACCURACY : ",test_acc_female*100)
print("TEST ACCURACY(Exact 1-off) : ",exact_1_off_Acc_female,"%")
print("*********************")
print("FOR CHILD:")
print("TEST ACCURACY : ",test_acc_child*100)
print("TEST ACCURACY(Exact 1-off) : ",exact_1_off_Acc_child,"%")
print("*********************")
print("THE END. Thanks for reading!")
print("=======================================================================")